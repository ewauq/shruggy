module.exports = {

    /**
     * Param√®tres de la commande.
     */

    name: "players",

    description: "**${prefix}players ${prefix}joueurs <nom d'un jeu>**  Retourne le nombre de joueurs en ligne sur Steam d'un jeu demand√©.",

    triggers: [
        "joueur",
        "joueurs",
        "player",
        "players"
    ],

    responses: [
        "üéÆ  **${game}** a actuellement **${players}** joueurs en ligne.",
        "üéÆ  Il y a acutellement **${players}** joueurs sur **${game}**.",
        "üéÆ  **${players}** joueurs sont acutellement sur **${game}**.",
        "üéÆ  On compte actuellement **${players}** joueurs en ligne sur **${game}**.",
        "üéÆ  Il y a **${players}** joueurs en ligne sur **${game}**.",
        "üéÆ  **${players}** personnes jouent en ce moment √† **${game}**.",
        "üéÆ  En ce moment, on compte **${players}** joueurs sur **${game}**."
    ],

    error_empty: [
        "J'ai besoin du nom pr√©cis d'un jeu.",
        "Sans un nom de jeu, je ne pourrais pas t'aider.",
        "Il me faut le nom d'un jeu apr√®s la commande.",
        "Je ne peux pas trouver d'infos si tu ne me donnes pas un jeu.",
        "Avec le nom d'un jeu c'est mieux.",
        "En principe, on me donne le nom d'un jeu avec cette commande."
    ],

    error_data_not_found: [
        "Le nombre de joueurs n'est pas disponible pour ce jeu sur SteamDB.",
        "Le total de joueurs en ligne pour ce jeu semble avoir √©t√© d√©sactiv√© sur SteamDB."
    ],

    error_no_result: [
        "D√©sol√©, mais je n'ai rien trouv√© avec ce titre.",
        "Je n'ai rien trouv√© avec ce nom, d√©sol√©.",
        "Ce titre de jeu ne retourne aucune information.",
        "Ce nom n'existe pas dans ma base de donn√©es."
    ],


    /**
     * Ex√©cution de la commande
     */

    exec: function(message, _callback) {

        this.output = null;
        this.error = null;

        // Ex√©cution normale du code.
        try {

            var tools = require("../../lib/functions.js");

            // R√©cup√©ration du message.
            var input = message.content.toLowerCase();

            // R√©cup√©ration du nom du jeu.
            var matches = input.match(/\/[0-9a-z]+\s(.+)/);

            // On pr√©serve les propri√©t√©s de la commande.
            var that = this;

            // On v√©rifie que le param√®tre est sp√©cifi√©.
            if(matches && matches[1].length > 0) {


                /**
                 * Fonctions de r√©cup√©ration des donn√©es SteamDB.
                 * @return {string} str Le nombre de joueurs en ligne.
                 */
                var steamdb = function() {

                    // Chargement des modules.
                    var osmosis = require('osmosis');
                    var tools = require("../../lib/functions.js");
                    require("string_score");

                    this.search = function(keywords, _callback) {

                        /**
                         * Recherche des jeux et r√©cup√©ration des r√©sultats.
                         */

                        var search_url = `https://steamdb.info/search/?a=app&q=${keywords}&type=1&category=0`;

                        osmosis.get(search_url)
                        .set([
                            osmosis
                            .find("table#table-sortable tr.app")
                            .set("title", "td[3]/text()")
                            // .set("url", function(context, data) {
                            //     return "https://steamdb.info/app/" + context.querySelector("td[1]/a/text()")
                            // })
                            .set("id", "td[1]/a/text()")
                            .set("last_update", "td[4]/text()")
                        ])
                        .data(function(data) {

                            // S'il n'y a aucun r√©sultat, on sort imm√©diatement.
                            if(!data || data.length == 0)
                                return;

                            var games = data;
                            var blacklist = ["dedicated server", "beta", "press", "nvidia", "nvida", "age rating", "ps3", "xbox", "ps4"];
                            var words = keywords.split(' ');

                            // Filtrage des r√©sultats pour ne garder que ce qu'on recherche.
                            // On supprime les termes non voulus et on ne garde que les temes complets.
                            games = tools.filter(games, blacklist, "title").unmatched;
                            games = tools.filter(games, words, "title").matched;

                            // On ajoute le param√®tre keywords filtr√© √† l'objet games.

                            // La blacklist sert √† affiner au mieux le score de recherche en supprimant
                            // les mots cl√©s non utiles.
                            var keywords_blacklist = ["Sid Meier\'s", "Tom Clancy\'s", "Clive Barker\'s"];

                            for(var i in games) {

                                games[i].keywords = games[i].title;

                                // On supprime les mots cl√©s inutiles.
                                for(var x in keywords_blacklist)
                                    games[i].keywords = games[i].keywords.replace(keywords_blacklist[x], "");

                                games[i].keywords = games[i].keywords.replace(/[^a-zA-Z0-9]/g, " ");
                                games[i].keywords = games[i].keywords.replace(/\s+/g, " ");
                                games[i].keywords = games[i].keywords.toLowerCase().trim();

                            }

                            // On formate la date de derni√®re mise √† jour vers un timestamp plus facile √† trier.
                            for(var i in games) {

                                var matches = games[i].last_update.match(/([A-Za-z]+)\s([0-9]+),\s([0-9]+)\s[‚Äì]\s([0-9]+):([0-9]+):([0-9]+)\sUTC/);

                                var date = {
                                    year: matches[3],
                                    month: new Date(Date.parse(matches[1] +" 1, 2000")).getMonth(),
                                    day: matches[2],
                                    hour: matches[4],
                                    minutes: matches[5],
                                    secondes: matches[6]
                                };

                                date = new Date(date.year, date.month, date.day, date.hour, date.minutes, date.secondes).getTime();
                                date = date.toString();
                                date = date.substring(0, date.length - 3); // getTime() retourne trois z√©ros en trop √† la fin.

                                games[i].last_update = date;

                            }

                            // Calcul du score de matching.
                            for(var i in games)
                                games[i].score = games[i].keywords.score(keywords, 1).toFixed(3);


                            // On cherche le meilleur score de matching.
                            var best_score = 0;
                            for(var i in games)
                                best_score = (games[i].score > best_score)? games[i].score : best_score ;

                            // On r√©cup√®re le(s) meilleur(s) r√©sultat(s).
                            var best_results = [];
                            for(var i in games)
                                if(games[i].score == best_score) best_results.push(games[i]);

                            // On trie les r√©sultats par date de mise √† jour.
                            best_results.sort(function(a, b) {
                                return a.last_update - b.last_update;
                            });

                            var selected = best_results.slice(-1)[0];

                            var error = null;

                            _callback(selected);

                        })
                        .error(function() {
                            _callback(false);
                        });

                    };

                    this.getPlayers = function(game_id, _callback) {

                        // R√©cup√©ration des infos via le module osmosis
                        var osmosis = require('osmosis');

                        // R√©cup√©ration des joueurs du meilleur r√©sultat.
                        osmosis.get(`https://steamdb.info/app/${game_id}/`)
                        .find('#js-graphs-button')
                        .set('players', ".")
                        .data(function(data) {
                            _callback(data.players.match(/([0-9,]+)/)[1]);
                        })
                        .error(function() {
                            // Si le nombre de joueur n'est pas trouv√©, on retourne false.
                            _callback(false);
                        });

                    }

                };


                /**
                 * R√©cup√©ration des donn√©es SteamDB.
                 */
                var steamdb = new steamdb();

                steamdb.search(matches[1], function(game) {

                    // Si aucun jeu n'est trouv√©, on envoie la r√©ponse d'erreur et on arr√™te le script.
                    if(!game) {
                        console.log(`[ERREUR] La recherche SteamDB n'a rien trouv√©.`);
                        this.output = tools.randomize(that.error_no_result);
                        _callback(this.output, this.error);
                        return;
                    }

                    // Si un jeu est trouv√©.
                    steamdb.getPlayers(game.id, function(players) {

                        // Si le jeu existe et qu'il a des joueurs.
                        if(players) {

                            console.log("[COMMANDE] Donn√©es r√©cup√©r√©es depuis SteamDB :");
                            console.log(game);

                            // Pr√©paration des donn√©es pour les litt√©raux.
                            var data = {
                                game: game.title,
                                players: players
                            }

                            // R√©cup√©ration d'une phrase al√©atoire et remplacement des litt√©raux.
                            this.output = tools.randomize(that.responses).template(data);

                        }

                        // Si le nombre de joueurs n'est pas trouv√©.
                        else {
                            this.output = tools.randomize(that.error_no_result);
                        }

                        _callback(this.output, this.error);

                    });

                });

            }
            else {
                this.output = tools.randomize(that.error_empty);
            }

        }

        // Gestion des erreurs
        catch(e) {

            if(!this.responses) {
                this.error = `Les phrases de r√©ponses de la commande <${this.name}> n'ont pas √©t√© trouv√©es.`;
            }
            else {
                this.error = `La commande <${this.name}> a provoqu√© une erreur : ${e.message}`;
            }

        }

        // Quoiqu'il arrive, on fait appel au callback.
        finally {

            _callback(this.output, this.error);

        }

    }

};
